 package  {		import flash.display.*;	import flash.events.*;	import flash.geom.Point;	import flash.events.*;	import flash.text.*;		//*** added chapter 12 for package structure	import com.bitrocket8.game.events.CustomEvent;	import com.bitrocket8.game.sound.SoundManager;	import com.bitrocket8.game.screens.BasicScreen;	import com.bitrocket8.game.screens.LevelInScreen;	import com.bitrocket8.game.screens.PausedScreen;	import com.bitrocket8.game.screens.ScoreBoard;	import com.bitrocket8.game.widgets.SideBySideScoreElement;		//*** for Mochi	import mochi.as3.*;		/**	 * ...	 * @author Steve Fulton and Jeff Fulton	 * Main used with package structure	 */			dynamic public class Main extends MovieClip {  //dyanmic and MovieClip for Mochi				public static const DISPLAY_UPDATE_NORMAL:int = 0;		public static const DISPLAY_UPDATE_EXCESS:int = 1;					public static const STATE_SYSTEM_WAITFORCLOSE:int = 0;		public static const STATE_SYSTEM_TITLE:int = 1;		public static const STATE_SYSTEM_INSTRUCTIONS:int = 2;		public static const STATE_SYSTEM_NEWGAME:int = 3;		public static const STATE_SYSTEM_GAMEOVER:int = 4;		public static const STATE_SYSTEM_NEWLEVEL:int = 5;		public static const STATE_SYSTEM_LEVELIN:int = 6;		public static const STATE_SYSTEM_GAMEPLAY:int = 7;		public static const STATE_SYSTEM_LEVELOUT:int = 8;		public static const STATE_SYSTEM_WAIT:int = 9;		public static const STATE_SYSTEM_MOCHIAD:int = 10;		public static const STATE_SYSTEM_PRELOAD:int = 11;		public static const STATE_SYSTEM_MOCHIHIGHSCORES:int = 12;								//*** sound contstants moved to Main in chapter 12 for package structure		public static var SOUND_PLAY_SOUND:String = "playsound";		public static var SOUND_PLAY_SOUNDTRACK:String = "playsoundtrack";		public static var SOUND_TITLEMUSIC:String = "titlemusic";		public static var SOUND_INGAMEMUSIC:String = "ingamemusic";		public static var SOUND_EXPLODE:String = "explode";								public static const WAIT_COMPLETE:String = "wait complete";				public static const KEY_PAUSE:int = 80; //added chapter 11 		public static const KEY_MUTE:int = 77;  // added chapter 11		public var paused:Boolean = false;  //added chapter 11				public var systemFunction:Function; //changed to public chapter 11		private var currentSystemState:int;		private var nextSystemState:int;		private var lastSystemState:int;		private var appBackBD:BitmapData = new BitmapData(600, 400, false, 0x000000); //**Changed chapter 11 to new width		private var appBackBitmap:Bitmap = new Bitmap(appBackBD);			public var gameTimer:AdvancedTimer; //changed chapter 11 to AdveancedTimer							//*** all screens modified chapter 12 for locations and text		private var titleScreen:BasicScreen = new BasicScreen("title", true, "PLAY", new Point(250,250), 100,20 ); 		private var gameoverScreen:BasicScreen = new BasicScreen("gameover",true,"Submit",new Point(250,250), 100,20); 		private var instructionsScreen:BasicScreen = new BasicScreen("instructions", true, "START", new Point(250, 250), 100, 20); 		private var levelinScreen:LevelInScreen = new LevelInScreen(600, 400, 0xbbff00ff, "levelin", false, "");		private var pausedScreen:PausedScreen = new PausedScreen(600,400,0xaa000000,  "pause", true, "UNPAUSE", new Point(250, 250), 100, 20);		private var preloadScreen:BasicScreen = new BasicScreen("loading",false,"");		private var scoreBoard:ScoreBoard = new ScoreBoard();				private var game:Game; 		private var sndManager:SoundManager; 				private var waitTime:int = 30;		private var waitCount:int=0;				//*** added in chapter 12 to create package structure		private var textformat1:TextFormat = new TextFormat("_sans", "11", "0xffffff", "true"); //moved in chapter 12 				//*** added chapter 12 for Mochi Highscores		private var gameId:String = "81e8cd4f0999371e";		private var boardId:String = "ffe2de0ae221a7f4";		private var lastscore:int; // holds the score from the previous game to send to Mochi				//**added chapter 12 for preloader		private var preloaderStarted:Boolean=false;		private var preloadString:String=new String();			public function Main() {			//added for preloader chapter 12			//if (stage) init();			//else addEventListener(Event.ADDED_TO_STAGE, init);			init();					}				//*** changed chapter 12 for preloader		private function init(e:Event = null):void {			//removeEventListener(Event.ADDED_TO_STAGE, init);			//*** added chapter 12 for Moch LeaderBoards			MochiServices.connect(gameId, this);						//*** create scoreboard elements added chapter 12 for package structure			scoreBoard.createTextElement("score", new SideBySideScoreElement(50, 0, 20, "Score", textformat1, 25, "0", textformat1)); //added chapter 12			//*** end added chapter 12 for scoreboard						sndManager = new SoundManager(10);  // changed chapter 12 to add in mp3 skip value 						//***ide version move sounds to after pre-loader						game = new Game(); // changed in chapter 12 - game no longer is passed a refernece to sndManager, events are now used to play sounds			game.y = 0; //changed back to 0 for chapter 11			game.x = 0; //changed back to 0 for chapter 11			addChild(appBackBitmap);			addChild(scoreBoard);			//switchSystemState(STATE_SYSTEM_PRELOAD);			switchSystemState(STATE_SYSTEM_MOCHIAD);						stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDownListener); // added chapter 11 for pause button			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpListener); // added chapter 11 for pause button						this.focusRect=false; // added chapter 11 for pause button			stage.focus = stage; // added chapter 11 for pause button						//*** all of the next lines changed or added for new advanced timer			gameTimer = new AdvancedTimer(35, 28, this);			gameTimer.start(true, true,4000,2);			//gameTimer.start(false);			addChild(gameTimer);			gameTimer.x = 0;			gameTimer.y = 0;			gameTimer.xLocationAfterProfile=300;			gameTimer.yLocationAfterProfile = 0;			gameTimer.showStats = true;					}					public function switchSystemState(stateval:int):void {			lastSystemState = currentSystemState;			currentSystemState = stateval;						switch(stateval) {																case STATE_SYSTEM_WAIT: 					systemFunction = systemWait;					break;								case STATE_SYSTEM_WAITFORCLOSE:					systemFunction = systemWaitforclose;					break;								case STATE_SYSTEM_TITLE:					systemFunction = systemTitle;					break;						    case STATE_SYSTEM_INSTRUCTIONS:					systemFunction = systemInstructions;					break;								case STATE_SYSTEM_NEWGAME:					systemFunction = systemNewgame;					break;									case STATE_SYSTEM_NEWLEVEL:					systemFunction = systemNewlevel;					break;								case STATE_SYSTEM_LEVELIN:					systemFunction = systemLevelin;					break;								case STATE_SYSTEM_GAMEPLAY:					systemFunction = systemGameplay;					break								case STATE_SYSTEM_GAMEOVER:					systemFunction = systemGameover;					break;								//*** added chapter 12				case STATE_SYSTEM_MOCHIAD: 					systemFunction = systemMochiAd;					break;									case STATE_SYSTEM_MOCHIHIGHSCORES: 					systemFunction = systemMochiHighscores;					break;									case STATE_SYSTEM_PRELOAD: 					systemFunction = systemPreload;					break;				//*** end added chapter 12			}			}				//*** function added chapter 12		private function systemPreload(updateType:int):void {			if (!preloaderStarted) {				trace("preload started");				preloadScreen.setDisplayText("Loading: 0%", 200, 200, 150); //Changed chapter 11				addChild(preloadScreen)				//this.loaderInfo.addEventListener(ProgressEvent.PROGRESS, preloadProgress);				//this.loaderInfo.addEventListener(Event.COMPLETE, preloadComplete);				preloaderStarted=true;			}else{								var percentLoaded:int=(this.loaderInfo.bytesLoaded/this.loaderInfo.bytesTotal)*100;				trace(percentLoaded);				preloadString="Loading: "+percentLoaded+"%";				preloadScreen.setDisplayText(preloadString, 200, 200, 150);				if (percentLoaded >99) {					trace(">99");					this.play();				}								if (currentFrame==3) {					trace("frame == 3")										//***ide version move sounds to after pre-loader				    sndManager.addSound(SOUND_TITLEMUSIC, new sound_musicTitle());				    sndManager.addSound(SOUND_INGAMEMUSIC, new sound_musicIngame());				    sndManager.addSound(SOUND_EXPLODE, new sound_explode());										removeChild(preloadScreen);					nextSystemState = STATE_SYSTEM_TITLE;					switchSystemState(nextSystemState);				}							}					}								//*** function added chapter 12		private function systemMochiAd(updateType:int):void {						MochiAd.showPreGameAd({clip:this, id:gameId, res:"600x400", ad_finished:mochiAdComplete, ad_failed:mochiAdComplete, ad_skipped:mochiAdComplete});			switchSystemState(STATE_SYSTEM_WAITFORCLOSE);			nextSystemState = STATE_SYSTEM_PRELOAD;		}				//*** new Function for Mochi ads chapter 12		private function mochiAdComplete():void {			switchSystemState(nextSystemState);		}				//*** added chapter 12 for mochi high scores		private function systemMochiHighscores(updateType:int):void {			var o:Object = { n: [15, 15, 14, 2, 13, 14, 0, 10, 14, 2, 2, 1, 10, 7, 15, 4], f: function (i:Number,s:String):String { if (s.length == 16) return s; return this.f(i+1,s + this.n[i].toString(16));}};			//var boardID:String = o.f(0,"");			MochiScores.showLeaderboard({boardID: boardId, score: lastscore, onClose:mochiHighscoresComplete, res:"600x400" });						switchSystemState(STATE_SYSTEM_WAITFORCLOSE);			nextSystemState = STATE_SYSTEM_TITLE;		}				//*** new Function for Mochi ads chapter 12		private function mochiHighscoresComplete():void {			switchSystemState(nextSystemState);			}						//*** function added chapter 11		private function pauseSystem():void {			pausedScreen.setDisplayText("Paused", 200, 200, 150); //Changed chapter 11			addChild(pausedScreen);			pausedScreen.addEventListener(CustomEvent.CUSTOMEVENT_OKCLICKED, okButtonClickListener, false, 0, true);			paused = true;					}				//*** end function added chapter 11				private function systemTitle(updateType:int):void {									sndManager.playSoundTrack(SOUND_TITLEMUSIC,0, 1); //*** changed chapter 12			titleScreen.setDisplayText("Tunnel Panic", 200, 200, 150); //Changed chapter 12			addChild(titleScreen);			titleScreen.addEventListener(CustomEvent.CUSTOMEVENT_OKCLICKED, okButtonClickListener, false, 0, true);			switchSystemState(STATE_SYSTEM_WAITFORCLOSE);			nextSystemState = STATE_SYSTEM_INSTRUCTIONS;					}				private function systemInstructions(updateType:int):void {			instructionsScreen.setDisplayText("Space moves up. Don't hit anything.", 300, 150, 150); //**changed chapter 12			addChild(instructionsScreen);			instructionsScreen.addEventListener(CustomEvent.CUSTOMEVENT_OKCLICKED, okButtonClickListener, false, 0, true);			switchSystemState(STATE_SYSTEM_WAITFORCLOSE);			nextSystemState = STATE_SYSTEM_NEWGAME;		}				private function systemNewgame(updateType:int):void {			addChild(game);			game.setRendering(35, gameTimer.SBTframerate);			game.addEventListener(CustomEvent.CUSTOMEVENT_SBUPDATE, scoreBoardUpdateListener, false, 0, true);			game.addEventListener(CustomEvent.CUSTOMEVENT_LVSUPDATE, levelScreenUpdateListener, false, 0, true);			game.addEventListener(CustomEvent.CUSTOMEVENT_PLAYSOUND, soundPlayListener, false, 0, true);			game.addEventListener(Game.GAMEOVER, gameOverListener, false, 0, true);			game.addEventListener(Game.NEWLEVEL, newLevelListener, false, 0, true);			game.newGame();			switchSystemState(STATE_SYSTEM_NEWLEVEL);		}						private function systemNewlevel(updateType:int):void {			game.newLevel();			switchSystemState(STATE_SYSTEM_LEVELIN);		}				private function systemLevelin(updateType:int):void {						addChild(levelinScreen);			levelinScreen.alpha = 1;			switchSystemState(STATE_SYSTEM_WAIT);			nextSystemState = STATE_SYSTEM_GAMEPLAY;			addEventListener(WAIT_COMPLETE, waitCompleteListener, false, 0, true);					}				private function systemGameover(updateType:int):void {			removeChild(game);			//game.x = 404; //removed chapter 11			gameoverScreen.setDisplayText("Game Over", 100, 250, 150); //*** changed chapter 12			addChild(gameoverScreen);			gameoverScreen.addEventListener(CustomEvent.CUSTOMEVENT_OKCLICKED, okButtonClickListener, false, 0, true);						switchSystemState(STATE_SYSTEM_WAITFORCLOSE);			nextSystemState = STATE_SYSTEM_MOCHIHIGHSCORES; // *** changd chapter 12 for high scores		}				private function systemGameplay(updateType:int):void {			game.runGame(updateType,paused);		}								private function systemWaitforclose(updateType:int):void {			//do nothing		}								private function systemWait(updateType:int):void { 											switch(lastSystemState) {					case STATE_SYSTEM_LEVELIN:																		levelinScreen.alpha -= .01;						if (levelinScreen.alpha < 0 ) {							dispatchEvent(new Event(WAIT_COMPLETE));							levelinScreen.alpha = 0;						}													break;					default:						waitCount++;						if (waitCount > waitTime) {							waitCount = 0;							dispatchEvent(new Event(WAIT_COMPLETE));						}						break;				}		}		private function okButtonClickListener(e:CustomEvent):void {			switch(e.attributes.id) {								case "title":										removeChild(titleScreen);					titleScreen.removeEventListener(CustomEvent.CUSTOMEVENT_OKCLICKED, okButtonClickListener);					break;						    case "instructions":					//sndManager.stopSound( SOUND_TITLEMUSIC  );//removed chapter 12					removeChild(instructionsScreen);					instructionsScreen.removeEventListener(CustomEvent.CUSTOMEVENT_OKCLICKED, okButtonClickListener);					break;													case "gameover":					removeChild(gameoverScreen);					gameoverScreen.removeEventListener(CustomEvent.CUSTOMEVENT_OKCLICKED, okButtonClickListener);					break;				//*** added chapter 11				case "pause":					removeChild(pausedScreen);					pausedScreen.removeEventListener(CustomEvent.CUSTOMEVENT_OKCLICKED, okButtonClickListener);					trace("clicked");					paused = false;					break;									//*** end added chapter 11			}						if (e.attributes.id != "pause") {				switchSystemState(nextSystemState);				trace("nextSystemState=" + nextSystemState)			}else {				trace("was just paused");			}			stage.focus = stage;		}								private function scoreBoardUpdateListener(e:CustomEvent):void {			scoreBoard.update(e.attributes.object, e.attributes.value);		}				//*** added chapter 12 for package structure de-coupler		private function soundPlayListener(e:CustomEvent):void {			switch(e.attributes.type) {				case SOUND_PLAY_SOUND:					sndManager.playSound(e.attributes.name, e.attributes.loops, e.attributes.offset, e.attributes.vol) 					break;				case SOUND_PLAY_SOUNDTRACK:					sndManager.playSoundTrack(e.attributes.name, e.attributes.offset, e.attributes.vol);					break;			}		}						private function levelScreenUpdateListener(e:CustomEvent):void {			levelinScreen.setDisplayText(e.attributes.level, 100, 250, 150); //*** changed chapter 12 to display what ever text comes through						//**removed chapter 11			//levelinScreen.setHeartstocollectText("Collect " + e.attributes.heartsneeded + " hearts.", 300, 130, 200); 		}				//*** modified in chapter 12 to add in accpetance of the player's final scores		private function gameOverListener(e:CustomEvent):void {			lastscore = int(e.attributes.score);			trace("lastscore=" + lastscore);			switchSystemState(STATE_SYSTEM_GAMEOVER);			game.removeEventListener(CustomEvent.CUSTOMEVENT_SBUPDATE, scoreBoardUpdateListener);			game.removeEventListener(CustomEvent.CUSTOMEVENT_LVSUPDATE, levelScreenUpdateListener);			game.removeEventListener(CustomEvent.CUSTOMEVENT_PLAYSOUND, soundPlayListener); //*** added chapter 12			game.removeEventListener(Game.GAMEOVER, gameOverListener);			game.removeEventListener(Game.NEWLEVEL, newLevelListener);		}				private function newLevelListener(e:Event):void {			switchSystemState(STATE_SYSTEM_NEWLEVEL);		}				private function waitCompleteListener(e:Event):void {			switch(lastSystemState) {								case STATE_SYSTEM_LEVELIN:					removeChild(levelinScreen);					break			}			removeEventListener(WAIT_COMPLETE, waitCompleteListener);			switchSystemState(nextSystemState);		}				//** new function in chapter 11		private function keyDownListener(e:KeyboardEvent):void { 					//	trace("key down: " + e.keyCode);			switch(e.keyCode) {				case KEY_PAUSE:					//pause key pressed					pausedKeyPressedHandler();					break;				case KEY_MUTE:					muteKeyPressedHandler();					break;							}					}				//** new function in chapter 11		private function keyUpListener(e:KeyboardEvent):void { //** new function in chapter 11						//trace("key up: " + e.keyCode);		}		//** new function in chapter 11		private function pausedKeyPressedHandler():void {			trace("handle pause");			pauseSystem();		}		//** new function in chapter 11		private function muteKeyPressedHandler():void {			sndManager.muteSound();		}			}	}